pipeline {
    agent any
    
    tools {
        jdk 'JAVA8'
        maven 'maven3.6.3'
    }
    
    stages {
        stage('Build') {
            steps {
                dir('/var/lib/jenkins/workspace/sonarqube/sonarqube-pipeline') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('/var/lib/jenkins/workspace/sonarqube/sonarqube-pipeline') {
                    script {
                        // Use 'withSonarQubeEnv' to set the SonarQube server configuration
                        withSonarQubeEnv('LocalSonarqube') {
                            sh 'mvn -X sonar:sonar'
                        }
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    // Use 'waitForQualityGate' to wait for the quality gate status
                    // 'abortPipeline: false' will prevent the pipeline from aborting even if the quality gate fails
                    // 'credentialsId' should refer to the Jenkins credentials containing the SonarQube token
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
    }
}
